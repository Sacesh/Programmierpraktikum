#!/usr/bin/perl -wl
use strict;

die "Enter the path to the file as parameter!" unless defined $ARGV[0];
open FILE, $ARGV[0] or die "File does not exist / not a correct path!";

my @seq = <FILE>;
my $sequence;

for(my $i=0;$i<scalar(@seq);$i++){
	$sequence .= $seq[$i];
	chomp $sequence;
}

######### generate complementary reverse sequence:
my $reverseSequence = reverse($sequence);
my $complementaryReverseSequence;

for(my $i=0;$i<length($reverseSequence);$i++){
	if((substr($reverseSequence, $i,1)) eq "A"){
		$complementaryReverseSequence.="T";
	}
	elsif(substr($reverseSequence, $i,1) eq "T"){
		$complementaryReverseSequence.="A";
	}
	elsif(substr($reverseSequence, $i,1) eq "G"){
		$complementaryReverseSequence.="C";
	}
	elsif(substr($reverseSequence, $i,1) eq "C"){
		$complementaryReverseSequence.="G";
	}
}

$reverseSequence = "";
my $maxORFlength = 0;
my $ORFcountFwd = 0;	my $ORFcountRev = 0;	my $ORFcountAll = 0;
my %ORFlengthsFwd;	my %ORFlengthsRev;	my %ORFlengthsAll;
my %ORFpositionsFwd;	my %ORFpositionsRev;
##### check fwd. strand for ORFs:
while($sequence =~ m/(ATG(.{3})*?(TAG|TGA|TAA))/g) {
	$ORFpositionsFwd{$-[0]} = $+[0];#store the beginning and end of the ORF in a hash
	$ORFlengthsFwd{length($1)} += 1;
	$ORFlengthsAll{length($1)} += 1;
	$ORFcountFwd++;
	$ORFcountAll++;
	if($maxORFlength<(length($1))){#evaluate the longest ORF, which is neccessary for the histogram
		$maxORFlength = length($1);
	}
}
##### check reverse comp. strand for ORFs:
while($complementaryReverseSequence =~ m/(ATG(.{3})*?(TAG|TGA|TAA))/g) {
	$ORFpositionsRev{$-[0]} = $+[0];#store the beginning and end of the ORF in a hash
	$ORFlengthsRev{length($1)} += 1;
	$ORFlengthsAll{length($1)} += 1;
	$ORFcountRev++;
	$ORFcountAll++;
	if($maxORFlength<(length($1))){#evaluate the longest ORF, which is neccessary for the histogram
		$maxORFlength = length($1);
	}
}
print "$ORFcountAll ORFs found, $ORFcountFwd on forward, $ORFcountRev on reverse, complementary strand";

###### make statistics files:
for(my $i=0;$i<$maxORFlength;$i++){
	$ORFlengthsAll{$i} = 0 unless defined $ORFlengthsRev{$i};
}

my $lengthDistribution;

while ( (my $k,my $v) = each %ORFlengthsAll ) {
    $lengthDistribution .= "$k\t$v\n";
}

my $ORFpostionsFwd;

while ( (my $k,my $v) = each %ORFpositionsFwd ) {
    $ORFpostionsFwd .= "$k\t$v\n";
}

my $ORFpostionsRev;

while ( (my $k,my $v) = each %ORFpositionsRev ) {
    $ORFpostionsRev .= "$k\t$v\n";
}

my $gnuplot = `mkdir Results`;

open (MYFILE, '>>lengthDistribution_'.($ARGV[0]));
print MYFILE $lengthDistribution;
close (MYFILE);

open (MYFILE, '>>ORFpositionsForwardStrand_'.($ARGV[0]));
print MYFILE $ORFpostionsFwd;
close (MYFILE);

open (MYFILE, '>>ORFpositionsComplementaryStrand_'.($ARGV[0]));
print MYFILE $ORFpostionsRev;
close (MYFILE);

my $fileName = "lengthDistribution_".($ARGV[0]);
$gnuplot = `./gnuplot $fileName $maxORFlength 1`;
$gnuplot = `./gnuplot $fileName 200 25`;
$gnuplot = `mv $fileName Results`;
$fileName = "ORFpositionsForwardStrand_".($ARGV[0]);
$gnuplot = `mv ORFpositions* Results`;
$gnuplot = `mv Histo* Results`;


########## TODO: put results to database:
