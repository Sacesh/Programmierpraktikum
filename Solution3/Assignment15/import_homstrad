#!/usr/bin/perl -w
# file layout (tem)
# >SeqName
# Type (sequence, secondary structure and phi angle, etc.)
# Sequence
# The file might more than one time contain each SeqName,
# so that all information could be given for each Sequence.
# file layout (ali)
# >SeqName (might refer tem-file)
# Some Information about the Sequence
# Sequence with gap that aligns the other Sequences in the file
# imports
use strict;
use LWP::Simple;
use DBI;

#
#Get the organism ID, insert it if not existent
sub getOrganismId {
    my $db       = $_[0];
    my $organism = $_[1];

    #Try to fetch an existing organism
    my $queryOrganismIdStmt =
      $db->prepare("SELECT `Id` from Organism WHERE `Name` = ?;");
    $queryOrganismIdStmt->execute($organism);
    my $result = $queryOrganismIdStmt->fetchrow_hashref();
    if ( defined $result->{Id} ) {
        return $result->{Id};
    }
    else {

        #If that didn't work, we need to insert it
        my $insertStmt =
          $db->prepare("INSERT INTO Organism(`Name`) VALUES (?);");
        $insertStmt->execute($organism);
        return $insertStmt->{mysql_insertid};
    }
}

# subs
sub getHomstradId {

    # params
    my $db = $_[0];

    # Try to fetch DB ID
    my $querySelect =
      $db->prepare("SELECT Id from DB WHERE Name = 'HOMSTRAD';");
    $querySelect->execute();
    my $result = $querySelect->fetchrow_hashref();
    if ( defined $result->{Id} ) {
        return $result->{Id};
    }
    else {
        die
"WHO FAILED TO INITIALIZE THE DATABASE PROPERLY, AGAIN? WHOEVER, EXECUTE SQLInsert.sql, DO IT NOW!\n";
    }
}

sub insertAlignment {
    my $db                = $_[0];
    my $homstradDBId      = $_[1];
    my $pdbId             = $_[2];
    my $otherProteinPDBId = $_[3];
    my $name              = $_[4];
    my $def               = $_[5];
    my $organism          = $_[6];
    my $alignment         = $_[7];

    #Insert the sequence
    my $insertStmt = $db->prepare(
"INSERT INTO SecStructAlign(`DBId`, `FromDBId`, `ToDBId`, `Content`, `EntryType`) VALUES (?,?,?,?,'Alignment') ON DUPLICATE KEY UPDATE;"
    );
    $insertStmt->execute( $homstradDBId, $pdbId, $otherProteinPDBId,
        $alignment );
    return $insertStmt->{mysql_insertid};
}

sub insertStructure {
    my $db           = $_[0];
    my $homstradDBId = $_[1];
    my $pdbId        = $_[2];
    my $type         = $_[3];
    my $content      = $_[4];

    #Insert the sequence
    my $insertStmt = $db->prepare(
"INSERT INTO SecStructAlign(`DBId`, `FromDBId`, `Content`, `Type`, `EntryType`) VALUES (?,?,?,?,'Secondary Structure') ON DUPLICATE KEY UPDATE;"
    );
    $insertStmt->execute( $homstradDBId, $pdbId, $type, $content );
    return $insertStmt->{mysql_insertid};
}

# Settings
my $path = "/home/proj/biocluster/praktikum/bioprakt/Data/HOMSTRAD/";

# open connection to Database
my $db = DBI->connect( 'DBI:mysql:bioprakt4;host=mysql2-ext.bio.ifi.lmu.de',
    'bioprakt4', 'vGI5GCMg0x' )
  or die "Could not connect to database: $DBI::errstr";
print "Established database connection...\n";
my $homstradDBId = getHomstradId($db);

# loop over all files
# in each directory theres a ali and a tem file (ali = Sequence-Alignment, tem = secondary structure)
opendir my($dh), $path or die "Couldn't open dir '$path': $!";
my @homstradFiles = readdir $dh; #The individual directories
closedir $dh;
foreach my $directory (@homstradFiles) {
	next if $directory eq "." or $directory eq "..";
    print "Processing $path$directory/$directory(.ali|.tem)\n";

    # read
    open ALIINPUT, "<$path$directory/$directory.ali"
      or die "Couldn't open file: \'$path$directory/$directory.ali\' " . $!;
    open TEMINPUT, "<$path$directory/$directory.tem"
      or die "Couldn't open file: \'$path$directory/$directory.tem\' " . $!;
    my @aliLines = <ALIINPUT>;
    my @temLines = <TEMINPUT>;
    close(ALIINPUT);
    close(TEMINPUT);
    my $pdbId             = "";    #PDB ID of the current protein
    my $otherProteinPDBId = "";
    my $name              = "";
    my $organism          = "";
    my $def               = "";
    my $alignment         = "";

    ##
    #Parse Alignments
    ##
    foreach my $line (@aliLines) {
        if ( substr( $line, 0, 2 ) eq "C;" ) {
            if ( $line =~ m/^C;\s+(.+)$/ ) {
                $def = $def . $1 . "\n";
            }
        }
        elsif ( substr( $line, 0, 1 ) eq ">" )
        {    # Identifier => save last ali if there is onex
            if ($pdbId) {
                insertAlignment( $db, $homstradDBId, $pdbId, $otherProteinPDBId,
                    $name, $def, $organism, $alignment );
                $alignment = "";
                $def       = "";
            }

            #Parse the identifier data
            if ( $line =~ m/^>P1;(.+)$/ ) {
                $pdbId = $1;
            }
            else {
                die "Can't find P1 Protein ID in line $line .... \n";
            }
        }
        elsif ( substr( $line, 0, 10 ) eq "structureX" ) {
            chomp($line);
            my @grep = split( /:/, $line );
            $otherProteinPDBId = $grep[1];
            $name              = $grep[6];
            $organism          = $grep[7];
        }
        else {    #It's a line of the alignment
                  #Remove whitespace
            $line =~ s/\s//g;
            $alignment = $alignment . $line;
        }
    }
    my $nextLineIsType = 0;
    my $type           = "";
    my $content        = "";
    ##
    #Parse SecStructs
    ##
    foreach my $line (@temLines) {
        if ($nextLineIsType) {
            chomp $line;
            $type = $line;
        }
        else {
            if ( substr( $line, 0, 1 ) eq ">" ) {    # Protein identifier
                $nextLineIsType = 1;
                if ($pdbId) {
                    insertStructure( $db, $homstradDBId, $pdbId, $type,
                        $content );
                    $content = "";
                }

                #Parse the identifier data
                if ( $line =~ m/^>P1;(.+)$/ ) {
                    $pdbId          = $1;
                    $nextLineIsType = 1;
                }
                else {
                    die "Can't find P1 Protein ID in line $line .... \n";
                }
            }
            else {    #It's a line of the structure
                $nextLineIsType = 0;
                chomp $line;

                #Remove whitespace
                $line =~ s/\s//g;
                $content = $content . $line;
            }
        }
    }
}
