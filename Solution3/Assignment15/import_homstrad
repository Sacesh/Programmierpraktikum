#!/usr/bin/perl -w
# file layout (tem)
# >SeqName
# Type (sequence, secondary structure and phi angle, etc.)
# Sequence
# The file might more than one time contain each SeqName,
# so that all information could be given for each Sequence.
# file layout (ali)
# >SeqName (might refer tem-file)
# Some Information about the Sequence
# Sequence with gap that aligns the other Sequences in the file
# imports
use strict;
use LWP::Simple;
use DBI;

sub trim {
	my $string = shift;
	$string =~ s/^\s+//;
	$string =~ s/\s+$//;
	return $string;
}
#
#Get the organism ID, insert it if not existent
sub getOrganismId {
    my $db       = $_[0];
    my $organism = $_[1];

    #Try to fetch an existing organism
    my $queryOrganismIdStmt = $db->prepare("SELECT `Id` from Organism WHERE `Name` = ?;");
    $queryOrganismIdStmt->execute($organism);
    my $result = $queryOrganismIdStmt->fetchrow_hashref();
    if ( defined $result->{Id} ) {
      return $result->{Id};
    }
    else {
      #If that didn't work, we need to insert it
      my $insertStmt = $db->prepare("INSERT INTO Organism(`Name`) VALUES (?);");
      $insertStmt->execute($organism);
      return $insertStmt->{mysql_insertid};
    }
}

# subs
sub getHomstradId {

    # params
    my $db = $_[0];

    # Try to fetch DB ID
    my $querySelect =
      $db->prepare("SELECT Id from DB WHERE Name = 'HOMSTRAD';");
    $querySelect->execute();
    my $result = $querySelect->fetchrow_hashref();
    if ( defined $result->{Id} ) {
        return $result->{Id};
    }
    else {
        die
"WHO FAILED TO INITIALIZE THE DATABASE PROPERLY, AGAIN? HOWEVER, EXECUTE SQLInsert.sql, DO IT NOW!\n";
    }
}

sub insertAlignment {
    my $db                  = $_[0];
    my $AlignmentIdentifier = $_[1];
    my $SeqIdentifier       = $_[2];
    my $OrganismId          = $_[3];
    my $Content             = $_[4];
    my $DBId                = $_[5];
    my $Type                = $_[6];
    my $seqDescription      = $_[7];

    #Insert the sequence
    my $insertStmt = $db->prepare(
      "INSERT DELAYED IGNORE INTO SecStructAlign(`AlignmentIdentifier`, `SeqIdentifier`, `OrganismId`, `Content`, `DBId`, `Type`, `Description`) VALUES (?,?,?,?,?,?,?);"
    );
    $insertStmt->execute( $AlignmentIdentifier, $SeqIdentifier, $OrganismId, $Content, $DBId, $Type , $seqDescription);
    return $insertStmt->{mysql_insertid};
}

sub getNextAlignmentId {
    my $db = $_[0];
    my $queryOrganismIdStmt = $db->prepare("SELECT (max(AlignmentIdentifier) + 1) AS RESULT FROM SecStructAlign;");
    $queryOrganismIdStmt->execute();
    my $result = $queryOrganismIdStmt->fetchrow_hashref();
    return $result->{RESULT} if( defined $result->{RESULT} );
    return 0;
}

# Settings
my $path = "/home/proj/biocluster/praktikum/bioprakt/Data/HOMSTRAD/";

# open connection to Database
my $db = DBI->connect( 'DBI:mysql:bioprakt4;host=mysql2-ext.bio.ifi.lmu.de', 'bioprakt4', 'vGI5GCMg0x' ) or die "Could not connect to database: $DBI::errstr";
print "Established database connection...\n";
my $homstradDBId = getHomstradId($db);

# loop over all files
# in each directory theres a ali and a tem file (ali = Sequence-Alignment, tem = secondary structure)
opendir my($dh), $path or die "Couldn't open dir '$path': $!";
my @homstradFiles = readdir $dh; #The individual directories
closedir $dh;
foreach my $directory (@homstradFiles) {
  next if $directory eq "." or $directory eq "..";
  print "Processing $path$directory/$directory(.ali|.tem)\n";
  
  # read
  open ALIINPUT, "<$path$directory/$directory.ali" or die "Couldn't open file: \'$path$directory/$directory.ali\' " . $!;
  open TEMINPUT, "<$path$directory/$directory.tem" or die "Couldn't open file: \'$path$directory/$directory.tem\' " . $!;
  my @aliLines = <ALIINPUT>;
  my @temLines = <TEMINPUT>;
  close(ALIINPUT);
  close(TEMINPUT);
  
  # save organsim, ids
  my %organismProtein = ();
  my %organismDescriptions = ();
  
  # variables for inserting
  my $OrganismName        = "";
  my $OrganismId          = "";
  my $SeqIdentifier       = "";
  my $Content             = "";
  my $Type                = "";
  my $seqDescription      = "";
  my $AlignmentIdentifier = getNextAlignmentId($db);
  my $otherProteinPDBId   = "";
  
  # parse variables
  my $identifer = "";
  my $data      = "";
  my $seq       = "";
  
  # parse ALI
  foreach my $line (@aliLines) {
    # C; => do nothing
    next if ( substr( $line, 0, 2 ) eq "C;" );
    
    # identifier after ">"
    if ( substr( $line, 0, 1 ) eq ">" ) {
      # save seq if variables not empty
      if( $Content && $OrganismName ) {
        # save Organism
        $OrganismId = getOrganismId($db, $OrganismName);
        # save Seq in Alignment
        insertAlignment($db, $AlignmentIdentifier, $SeqIdentifier, $OrganismId, $Content, $homstradDBId, "PROTEINALIGNMENT", $seqDescription);
        $organismProtein{$SeqIdentifier} = $OrganismId;
        $organismDescriptions{$SeqIdentifier} = $seqDescription;
        $Content = ""; $OrganismName = "";
      }
      if ( $line =~ m/^>P1;(.+)$/ ) {
        $SeqIdentifier = $1;
      } else {
        die "Can't find P1 Protein ID in line $line .... \n";
      }
    }
    # structureX: line
    elsif ( substr( $line, 0, 10 ) eq "structureX" ) {
      chomp($line);
      my @grep = split( /:/, $line );
      $seqDescription    = $grep[6];
      $OrganismName      = $grep[7];
    } else {
      # probably seq data
      chomp $line;
      
      #Remove whitespace
      $line =~ s/\s//g;
      $Content = $Content.$line;
    }
  }
  # also save last line
  if( $Content && $OrganismName ) {
    # save Organism
    $OrganismId = getOrganismId($db, $OrganismName);
    # save Seq in Alignment
    insertAlignment($db, $AlignmentIdentifier, $SeqIdentifier, $OrganismId, $Content, $homstradDBId, "PROTEINALIGNMENT", $seqDescription);
    $organismProtein{$SeqIdentifier} = $OrganismId;
    $organismDescriptions{$SeqIdentifier} = $seqDescription;
    $Content = ""; $OrganismName = "";
  }
  
  # parse TEM
  my $lineId = 0;
  foreach my $line (@temLines) {
    if ( substr( $line, 0, 1 ) eq ">" ) {
      # save seq if variables not empty
      if( $Content  ) {
        # save Seq in Alignment
        insertAlignment($db, $AlignmentIdentifier, $SeqIdentifier, $organismProtein{$SeqIdentifier}, $Content, $homstradDBId, trim(uc($Type)), $organismDescriptions{$SeqIdentifier});
        $Content = ""; $OrganismName = "";
      }
      if ( $line =~ m/^>P1;(.+)$/ ) {
        $SeqIdentifier = $1;
      } else {
        die "Can't find P1 Protein ID in line $line .... \n";
      }
      $lineId = 1;
    } elsif( $lineId == 1 ) {
      $line =~ s/\s//g;
      $Type = $line;
      $lineId = 0;
    } else {
      # probably seq data
      chomp $line;
      
      #Remove whitespace
      $line =~ s/\s//g;
      $Content = $Content.$line;
    }
  }
  if( $Content  ) {
    # save Seq in Alignment
    insertAlignment($db, $AlignmentIdentifier, $SeqIdentifier, $organismProtein{$SeqIdentifier}, $Content, $homstradDBId, trim(uc($Type)), $organismDescriptions{$SeqIdentifier});
    $Content = ""; $OrganismName = "";
  }
}
