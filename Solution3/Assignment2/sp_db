#!/usr/bin/perl -w
use strict;
use LWP::Simple;
use Getopt::Std;
#Subs

#Trim the whitespace from a string
sub trim {
	my $string = shift;
	$string =~ s/^\s+//;
	$string =~ s/\s+$//;
	return $string;
}

#Get the organism ID, insert it if not existent
sub getOrganismId {
	my $db = $_[0];
	my $organism = $_[1];
	#Try to fetch an existing organism
	my $queryOrganismIdStmt = $db->prepare("SELECT Id from Organism WHERE Name = ?;");
	$queryOrganismIdStmt->execute($organism);
	my $result = $queryOrganismIdStmt->fetchrow_hashref();
	if(defined $result->{Id}) {
		return $result->{Id}
	}
	#If that didn't return, we need to insert it
	my $insertStmt = $db->prepare("INSERT INTO Organism(`Name`) VALUES (?)");
	$insertStmt->execute($organism);
	return $insertStmt->{mysql_insertid};
}

sub checkIfSwissprotEntryExists {
	my $db = $_[0];
	my $primaryAC = $_[1];
	#Try to fetch an existing organism
	my $insertSeqDBEntryStmt = $db->prepare("Select `Id` from SeqDBEntry WHERE `SeqDBIdentifier` = ? AND `SeqDBId` =  (SELECT `Id` FROM SeqDB WHERE `Name` = 'SwissProt');");
	$insertSeqDBEntryStmt->execute($primaryAC);
	my $result = $insertSeqDBEntryStmt->fetchrow_hashref();
	if(defined $result->{Id}) {
		return 1;
	} else {
		return 0;
	}
}

#Download and insert a Uniprot sequence
sub insertSequence {
	my $db = $_[0];
	my $primaryAC = $_[1];
	my $definition = $_[2];
	my $organismId = $_[3];
	#Download the sequence
	use LWP::Simple;
	my $url = 'http://www.uniprot.org/uniprot/' . $primaryAC  . '.fasta';
	my $fastaSequence = get $url;
	die "Protein sequence for AC $primaryAC can't be downloaded!\n" unless defined $fastaSequence;
	#Insert the sequence
	my $insertSeqStmt = $db->prepare("INSERT INTO Seq(`Name`, `Definition`,`OrganismId`,`TypeId`,`Seq`) SELECT ?,?,?,`Id`,? FROM Type WHERE `Name`='Protein';");
	$insertSeqStmt->execute($primaryAC,$definition,$organismId,$fastaSequence);
	return $insertSeqStmt->{mysql_insertid};
}

#Insert the information about a sequence file into the database
#Automatically downloads the sequence by AC number
# Arguments: processEntry(db, ID, AC, Definition, Array of Keywords)
sub processSwissprotEntry {
	#Get the function arguments
	my $db = $_[0];
	my $id = $_[1];
	my @ACNumbers = @{$_[2]};
	my $definition = $_[3];
	my $organism = $_[4];
	my @keywords = @{$_[5]};
	#print "ACs:",join(",", @ACNumbers),"\n";
	my $primaryAC = $ACNumbers[0] ;
	##
	#Check if the entry is already present in the database
	##
	my $entryAlreadyExists = checkIfSwissprotEntryExists($db, $primaryAC);
	if($entryAlreadyExists) {
		print "Entry $primaryAC already exists\n";
		return;
	}
	###
	#Insert the dataset into the database
	###
	print "Processing $ACNumbers[0]\n";
	#Insert the database entry information
	my $insertSeqDBEntryStmt = $db->prepare("INSERT INTO SeqDBEntry(`SeqDBId`, `SeqDBIdentifier`) SELECT `Id`,? FROM SeqDB WHERE `Name` = 'SwissProt';");
	$insertSeqDBEntryStmt->execute($primaryAC);
	my $seqDBEntryId = $insertSeqDBEntryStmt->{mysql_insertid};
	#Get the organism ID
	my $organismId = getOrganismId($db, $organism);
	#Insert the sequence
	my $seqId = insertSequence($db, $primaryAC, $definition,$organismId);
	#Insert the n:m relation (db Entry <--> sequence) info
	my $insertSourceStmt = $db->prepare("INSERT INTO Source(`SeqId`, `EntryId`) VALUES (?,?);");
	$insertSourceStmt->execute($seqId,$seqDBEntryId);
}
#Parse CLI arguments
my %options=();
getopts("lu",\%options);
#Komandozeilenparameter
my $argc = @ARGV;
#Check if we have the required number of arguments
print STDERR "Usage: $0 <SwissProt filename>\n" unless $argc == 1;
print STDERR "    Use -l to use SSH port-forwarded database (on localhost)\n" unless $argc == 1;
die "	Use -u to use Uli's (Non-LMU) MySQL database (works from everywhere)\n" unless $argc == 1;
#
#Setup the database connection
#
use DBI;
my $db = undef;
if(defined $options{u}) {
	$db = DBI->connect('DBI:mysql:bioprakt4;host=localgrid.de', 'bioprakt4', 'vGI5GCMg0x') || die "Could not connect to database: $DBI::errstr";	
} elsif(defined $options{l}) {
	$db = DBI->connect('DBI:mysql:bioprakt4;host=127.0.0.1', 'bioprakt4', 'vGI5GCMg0x') || die "Could not connect to database: $DBI::errstr";	
} else {
	$db = DBI->connect('DBI:mysql:bioprakt4;host=mysql2-ext.bio.ifi.lmu.de', 'bioprakt4', 'vGI5GCMg0x') || die "Could not connect to database: $DBI::errstr";	
}
print "Established database connection...\n";
#Open the file and iterate over the lines
my $swissprotFile = $ARGV[0];
open my $fileHandle, '<', $swissprotFile or die "Could not open file $swissprotFile for reading: $!\n"; 
#Variables in the current entity
my $currentId = "";
my $currentDefinition = "";
my $currentOrganism = "";
my @currentACNumbers= ();
my @currentKeywords =  ();
while ( my $line = <$fileHandle> ) {
        chomp $line;
	#Parse the different lines
        if($line =~ m/^ID\s+(.+).$/) {
		#Process the old dataset
		#print "Last KW: ",join(",",@currentKeywords), "\n";
		#print $currentDefinition,"\n";
		if($currentId) { #If it's not before the first entry
			processSwissprotEntry($db, $currentId, \@currentACNumbers, $currentDefinition, $currentOrganism, \@currentKeywords);
		}
		#Reset the variables. Some of the assignments are not really neccessary but they ease format debugging
		$currentId = "[No ID found]";
		$currentDefinition = "";
		$currentOrganism = "";
		@currentACNumbers = ();
		@currentKeywords = ();
		#Process the new ID line, a new entry starts here
		$currentId = $1;
		chomp $currentId;
	} elsif($line =~ m/^AC\s+([\s;\w]+);$/) {#AC Numbers
		my $currentACEntries = $1;
		my @rawAcNumbers = split(";",$currentACEntries);
		foreach (@rawAcNumbers) {
			push(@currentACNumbers, trim($_));
		}
		#print $1."\n";
        } elsif($line =~ m/^DE\s+(.+);$/) { #Defintions
                $currentDefinition = $currentDefinition . $1; #qnd
        } elsif($line =~ m/^KW\s+(.+).$/) { #Keywords
		my $currentKeywordLine = $1;
		my @keywords = split(/;/,$currentKeywordLine);
		#trim the KWsdefined $options{t}
		my @processedKeywords  = ();
		foreach(@keywords) {
			my $processedKeyword = trim($_);
			push(@processedKeywords, $processedKeyword);
		}
		@currentKeywords = (@currentKeywords, @processedKeywords);
		chomp $currentId;
        } elsif($line =~ m/^OS\s+(.+).$/) { #Organism
                $currentOrganism = $currentOrganism . $1; #qnd
        }
}
#Do some cleanup
$db->disconnect();
close $fileHandle;