/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.bioinformatikmuenchen.pg4.validation;

/**
 *
 * @author schoeffel
 */
public class StrucValiAlg {

    //predicted secondary structure
    private String pred;
    //reference secondary structure
    private String observ;
    //safing intermediate results
    private double AH;
    private double BH;
    private double AE;
    private double BE;
    private double AC;
    private double BC;

    public StrucValiAlg(String pre, String sec) {
        assert sec.length() > 0;
        assert sec.length() == pre.length();   
        pred = pre;
        observ = sec;
        //cutting useless ends generated by GOR
        this.cutends();
        //counting secondary structure elements
        this.detHelix();
        this.detSheet();
        this.detCoil();

    }

    public double getQ3() {
        System.out.println("Number of matches " + (AH + AE + AC));
        System.out.println("Number of comparisons " + (BH + BE + BC));
        if (BH + BE + BC == 0) {
            System.out.println("No Secondary Struture annotated");
            return 0;
        }
        double result = (double) (AH + AE + AC) / (BH + BE + BC) * 100;
        return result;
    }

    public double getQH() {
        System.out.println("AH " + AH + "BH " + BH);
        return (double) AH / BH;
    }

    public double getQE() {
        System.out.println("AE " + AE + "BE " + BE);
        return (double) AE / BE;
    }

    public double getQC() {
        System.out.println("AC " + AC + "BC " + BC);
        return (double) AC / BC;
    }

    private void detHelix() {
        //correctly predicted helices
        int A = 0;
        //helices in structure
        int B = 0;
        //go through secondary structure sequence
        for (int i = 0; i < pred.length(); i++) {
            if (observ.charAt(i) == 'H') {
                B++;
                if (pred.charAt(i) == 'H') {
                    A++;
                }
            }
        }
        //write into global variables
        AH = A;
        BH = B;
    }

    private void detSheet() {
        //correctly predicted sheet
        int A = 0;
        //sheet in structure
        int B = 0;
        //go through secondary structure sequence
        for (int i = 0; i < pred.length(); i++) {
            if (observ.charAt(i) == 'E') {
                B++;
                if (pred.charAt(i) == 'E') {
                    A++;
                }
            }
        }
        //write into global variables
        AE = A;
        BE = B;
    }

    private void detCoil() {
        //correctly predicted coil
        int A = 0;
        //coil in structure
        int B = 0;
        //go through secondary structure sequence
        for (int i = 0; i < pred.length(); i++) {
            if (observ.charAt(i) == 'C') {
                B++;
                if (pred.charAt(i) == 'C') {
                    A++;
                }
            }
        }
        //write into global variables
        AC = A;
        BC = B;
    }

    private void cutends() {
        //initialize cutting borders
        int start = 0;
        int end = pred.length();
        //find first useable position
        while (pred.charAt(start) == '-') {
            start++;
        }
        //find last useable position
        while (pred.charAt(end -1) == '-') {
            end--;
        }
        //extract useful parts
        pred = pred.substring(start, end);
        observ = observ.substring(start, end);

        System.out.println(pred);
        System.out.println(observ);
    }
}
