#! /usr/bin/perl -w

use strict;
use LWP::Simple;
use Getopt::Std;
#Parse CLI options
my %options=();
getopts("f:n:s:",\%options);
#die "Usage: $0 -f <Genome file> -n <number of> -s <Start position>" unless defined $options{f} and defined $options{n} defined $options{s};
#Assign the variables
my $genomeFile = $options{f};
my $numberOf = $options{n};
my $startPos = $options{s};

# fillout not defined args
if(!defined $genomeFile) {
  print "Please enter genome file: ";
  chop ($genomeFile = <STDIN>);
}
if(!defined $numberOf) {
  print "Please enter number of bases: ";
  chop ($numberOf = <STDIN>);
}
if(!defined $startPos) {
  print "Warning: The starting position was not specified!\nAssuming standard value: -s all\n";
  $startPos = "all";
}
#Check if the input files exist
die "The genome file '$genomeFile' does not exist. Please use an existing file as filename\n" unless -e $genomeFile;
#Read the file into a string
open FILEHANDLE, "<".$genomeFile or die("can't open file!");
my @lines = <FILEHANDLE>;
close(FILEHANDLE);
#Parse FASTA format
my @genes = (); #A list of the individual FASTA blocks
my $currentBlock = "";
foreach my $line (@lines) {
  # line starts with '>'
  if(substr($line, 0, 1) eq ">") {
    # a new block starts
    if($currentBlock) { # don't save any empty blocks
      push(@genes, $currentBlock);
      $currentBlock = "";
    }
  }
  # line starts with ';' ?
  elsif(substr($line, 0, 1) eq ";") { } # FASTA comment => do nothing!
  # "Data" line
  else {
    # append to current block
    $line =~ s/\s//g;
    $currentBlock = $currentBlock.$line;
  }
}
if($currentBlock) {
  push(@genes, $currentBlock);
  $currentBlock = "";
}
#Do the main calculation
my $count = 0;
foreach my $gen(@genes) {
  # foreach subsequence with length = n
  foreach my $s (0 .. (length($gen) - $numberOf)) {
    if($startPos ne "all") {
      $s = $startPos;
    }
    my $seq = substr($gen, $s, $numberOf);
    # no other $gen contains $seq ?
    my $found = "false";
    foreach my $genCmp(@genes) {
      if(($gen ne $genCmp) && (index($genCmp, $seq) != -1)) {
        $found = "true";
        last; # found a sequence, don't have to find another one
      }
    }
    if($found eq "false") {
      $count += 1;
      last; # gen has an unique seq, don't want to search for another unique sequence
    }
    if($startPos ne "all") {
      last;
    }
  }
}
# return number
print "n: ".$numberOf." eq ".(($count) / ($#genes + 1) * 100)."%\n\n";
