#! /usr/bin/perl -wl
#warnings, newlines
use strict;

#The hash table has been copied from http://bioperl.wordpress.com/2011/04/14/genetic-code-perl-hash/
my(%genetic_code) = (
'UCA' => 'S', # Serine
'UCC' => 'S', # Serine
'UCG' => 'S', # Serine
'UCU' => 'S', # Serine
'UUC' => 'F', # Phenylalanine
'UUU' => 'F', # Phenylalanine
'UUA' => 'L', # Leucine
'UUG' => 'L', # Leucine
'UAC' => 'Y', # Tyrosine
'UAU' => 'Y', # Tyrosine
'UAA' => '_', # Stop
'UAG' => '_', # Stop
'UGC' => 'C', # Cysteine
'UGU' => 'C', # Cysteine
'UGA' => '_', # Stop
'UGG' => 'W', # Tryptophan
'CUA' => 'L', # Leucine
'CUC' => 'L', # Leucine
'CUG' => 'L', # Leucine
'CUU' => 'L', # Leucine
'CCA' => 'P', # Proline
'CAU' => 'H', # Histidine
'CAA' => 'Q', # Glutamine
'CAG' => 'Q', # Glutamine
'CGA' => 'R', # Arginine
'CGC' => 'R', # Arginine
'CGG' => 'R', # Arginine
'CGU' => 'R', # Arginine
'AUA' => 'I', # Isoleucine
'AUC' => 'I', # Isoleucine
'AUU' => 'I', # Isoleucine
'AUG' => 'M', # Methionine
'ACA' => 'T', # Threonine
'ACC' => 'T', # Threonine
'ACG' => 'T', # Threonine
'ACU' => 'T', # Threonine
'AAC' => 'N', # Asparagine
'AAU' => 'N', # Asparagine
'AAA' => 'K', # Lysine
'AAG' => 'K', # Lysine
'AGC' => 'S', # Serine
'AGU' => 'S', # Serine
'AGA' => 'R', # Arginine
'AGG' => 'R', # Arginine
'CCC' => 'P', # Proline
'CCG' => 'P', # Proline
'CCU' => 'P', # Proline
'CAC' => 'H', # Histidine
'GUA' => 'V', # Valine
'GUC' => 'V', # Valine
'GUG' => 'V', # Valine
'GUU' => 'V', # Valine
'GCA' => 'A', # Alanine
'GCC' => 'A', # Alanine
'GCG' => 'A', # Alanine
'GCU' => 'A', # Alanine
'GAC' => 'D', # Aspartic Acid
'GAU' => 'D', # Aspartic Acid
'GAA' => 'E', # Glutamic Acid
'GAG' => 'E', # Glutamic Acid
'GGA' => 'G', # Glycine
'GGC' => 'G', # Glycine
'GGG' => 'G', # Glycine
'GGU' => 'G'  # Glycine
);

print "Enter nucleotide sequence (press Enter, then Ctrl+D when finished to close STDIN):";
my @lines = <STDIN>;
my $protein1 = $lines[0];#append the head of the fasta file
my $protein2 = $lines[0];
my $protein3 = $lines[0];
my $protein4 = $lines[0];
my $protein5 = $lines[0];
my $protein6 = $lines[0];

my $RNA;
for(my $i=0;$i<scalar(@lines);$i++){
	for(my $j=0;$j<length($lines[$i]);$j++){
		$RNA.=substr($lines[$i],$j,1);
	}
}
my $reverseRNA = scalar reverse($RNA);

for(my $i=0;$i<length($RNA);$i+=3){#...fasta head will be overridden
	$protein1.=$genetic_code{substr($RNA,$i,3)};
	$protein2.=$genetic_code{substr($RNA,$i+1,3)};
	$protein3.=$genetic_code{substr($RNA,$i+2,3)};
	$protein4.=$genetic_code{substr($reverseRNA,$i,3)};
	$protein5.=$genetic_code{substr($reverseRNA,$i+1,3)};
	$protein6.=$genetic_code{substr($reverseRNA,$i+2,3)};
}
print "Frame 1: ".$protein1."\n";
print "Frame 2: ".$protein2."\n";
print "Frame 3: ".$protein3."\n";
print "Frame 4: ".$protein4."\n";
print "Frame 5: ".$protein5."\n";
print "Frame 6: ".$protein6."\n";

